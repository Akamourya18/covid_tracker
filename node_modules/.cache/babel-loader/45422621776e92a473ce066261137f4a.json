{"ast":null,"code":"/*!\r\n  * Bootstrap manipulator.js v5.0.1 (https://getbootstrap.com/)\r\n  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\r\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\r\n  */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Manipulator = factory());\n})(this, function () {\n  'use strict';\n  /**\r\n   * --------------------------------------------------------------------------\r\n   * Bootstrap (v5.0.1): dom/manipulator.js\r\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\r\n   * --------------------------------------------------------------------------\r\n   */\n\n  function normalizeData(val) {\n    if (val === 'true') {\n      return true;\n    }\n\n    if (val === 'false') {\n      return false;\n    }\n\n    if (val === Number(val).toString()) {\n      return Number(val);\n    }\n\n    if (val === '' || val === 'null') {\n      return null;\n    }\n\n    return val;\n  }\n\n  function normalizeDataKey(key) {\n    return key.replace(/[A-Z]/g, function (chr) {\n      return \"-\".concat(chr.toLowerCase());\n    });\n  }\n\n  var Manipulator = {\n    setDataAttribute: function setDataAttribute(element, key, value) {\n      element.setAttribute(\"data-bs-\".concat(normalizeDataKey(key)), value);\n    },\n    removeDataAttribute: function removeDataAttribute(element, key) {\n      element.removeAttribute(\"data-bs-\".concat(normalizeDataKey(key)));\n    },\n    getDataAttributes: function getDataAttributes(element) {\n      if (!element) {\n        return {};\n      }\n\n      var attributes = {};\n      Object.keys(element.dataset).filter(function (key) {\n        return key.startsWith('bs');\n      }).forEach(function (key) {\n        var pureKey = key.replace(/^bs/, '');\n        pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);\n        attributes[pureKey] = normalizeData(element.dataset[key]);\n      });\n      return attributes;\n    },\n    getDataAttribute: function getDataAttribute(element, key) {\n      return normalizeData(element.getAttribute(\"data-bs-\".concat(normalizeDataKey(key))));\n    },\n    offset: function offset(element) {\n      var rect = element.getBoundingClientRect();\n      return {\n        top: rect.top + document.body.scrollTop,\n        left: rect.left + document.body.scrollLeft\n      };\n    },\n    position: function position(element) {\n      return {\n        top: element.offsetTop,\n        left: element.offsetLeft\n      };\n    }\n  };\n  return Manipulator;\n});","map":{"version":3,"sources":["../../src/dom/manipulator.js"],"names":["val","Number","key","chr","Manipulator","setDataAttribute","element","normalizeDataKey","removeDataAttribute","getDataAttributes","attributes","Object","pureKey","normalizeData","getDataAttribute","offset","rect","top","document","left","scrollLeft","position","offsetLeft"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAA,aAAA,CAAA,GAAA,EAA4B;AAC1B,QAAIA,GAAG,KAAP,MAAA,EAAoB;AAClB,aAAA,IAAA;AACD;;AAED,QAAIA,GAAG,KAAP,OAAA,EAAqB;AACnB,aAAA,KAAA;AACD;;AAED,QAAIA,GAAG,KAAKC,MAAM,CAANA,GAAM,CAANA,CAAZ,QAAYA,EAAZ,EAAoC;AAClC,aAAOA,MAAM,CAAb,GAAa,CAAb;AACD;;AAED,QAAID,GAAG,KAAHA,EAAAA,IAAcA,GAAG,KAArB,MAAA,EAAkC;AAChC,aAAA,IAAA;AACD;;AAED,WAAA,GAAA;AACD;;AAED,WAAA,gBAAA,CAAA,GAAA,EAA+B;AAC7B,WAAOE,GAAG,CAAHA,OAAAA,CAAAA,QAAAA,EAAsBC,UAAAA,GAAG;AAAA,wBAAQA,GAAG,CAA3C,WAAwCA,EAAR;AAAA,KAAzBD,CAAP;AACD;;MAEKE,WAAW,GAAG;AAClBC,IAAAA,gBADkB,4BACF,OADE,EACF,GADE,EACF,KADE,EACoB;AACpCC,MAAAA,OAAO,CAAPA,YAAAA,mBAAgCC,gBAAgB,CAAhDD,GAAgD,CAAhDA,GAAAA,KAAAA;AAFgB,KAAA;AAKlBE,IAAAA,mBALkB,+BAKC,OALD,EAKC,GALD,EAKgB;AAChCF,MAAAA,OAAO,CAAPA,eAAAA,mBAAmCC,gBAAgB,CAAnDD,GAAmD,CAAnDA;AANgB,KAAA;AASlBG,IAAAA,iBATkB,6BASD,OATC,EASS;AACzB,UAAI,CAAJ,OAAA,EAAc;AACZ,eAAA,EAAA;AACD;;AAED,UAAMC,UAAU,GAAhB,EAAA;AAEAC,MAAAA,MAAM,CAANA,IAAAA,CAAYL,OAAO,CAAnBK,OAAAA,EAAAA,MAAAA,CACUT,UAAAA,GAAG;AAAA,eAAIA,GAAG,CAAHA,UAAAA,CADjBS,IACiBT,CAAJ;AAAA,OADbS,EAAAA,OAAAA,CAEWT,UAAAA,GAAG,EAAI;AACd,YAAIU,OAAO,GAAGV,GAAG,CAAHA,OAAAA,CAAAA,KAAAA,EAAd,EAAcA,CAAd;AACAU,QAAAA,OAAO,GAAGA,OAAO,CAAPA,MAAAA,CAAAA,CAAAA,EAAAA,WAAAA,KAAkCA,OAAO,CAAPA,KAAAA,CAAAA,CAAAA,EAAiBA,OAAO,CAApEA,MAA4CA,CAA5CA;AACAF,QAAAA,UAAU,CAAVA,OAAU,CAAVA,GAAsBG,aAAa,CAACP,OAAO,CAAPA,OAAAA,CAApCI,GAAoCJ,CAAD,CAAnCI;AALJC,OAAAA;AAQA,aAAA,UAAA;AAxBgB,KAAA;AA2BlBG,IAAAA,gBA3BkB,4BA2BF,OA3BE,EA2BF,GA3BE,EA2Ba;AAC7B,aAAOD,aAAa,CAACP,OAAO,CAAPA,YAAAA,mBAAgCC,gBAAgB,CAArE,GAAqE,CAAhDD,EAAD,CAApB;AA5BgB,KAAA;AA+BlBS,IAAAA,MA/BkB,kBA+BZ,OA/BY,EA+BF;AACd,UAAMC,IAAI,GAAGV,OAAO,CAApB,qBAAaA,EAAb;AAEA,aAAO;AACLW,QAAAA,GAAG,EAAED,IAAI,CAAJA,GAAAA,GAAWE,QAAQ,CAARA,IAAAA,CADX,SAAA;AAELC,QAAAA,IAAI,EAAEH,IAAI,CAAJA,IAAAA,GAAYE,QAAQ,CAARA,IAAAA,CAAcE;AAF3B,OAAP;AAlCgB,KAAA;AAwClBC,IAAAA,QAxCkB,oBAwCV,OAxCU,EAwCA;AAChB,aAAO;AACLJ,QAAAA,GAAG,EAAEX,OAAO,CADP,SAAA;AAELa,QAAAA,IAAI,EAAEb,OAAO,CAACgB;AAFT,OAAP;AAID;AA7CiB,G","sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.0.1): dom/manipulator.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nfunction normalizeData(val) {\n  if (val === 'true') {\n    return true\n  }\n\n  if (val === 'false') {\n    return false\n  }\n\n  if (val === Number(val).toString()) {\n    return Number(val)\n  }\n\n  if (val === '' || val === 'null') {\n    return null\n  }\n\n  return val\n}\n\nfunction normalizeDataKey(key) {\n  return key.replace(/[A-Z]/g, chr => `-${chr.toLowerCase()}`)\n}\n\nconst Manipulator = {\n  setDataAttribute(element, key, value) {\n    element.setAttribute(`data-bs-${normalizeDataKey(key)}`, value)\n  },\n\n  removeDataAttribute(element, key) {\n    element.removeAttribute(`data-bs-${normalizeDataKey(key)}`)\n  },\n\n  getDataAttributes(element) {\n    if (!element) {\n      return {}\n    }\n\n    const attributes = {}\n\n    Object.keys(element.dataset)\n      .filter(key => key.startsWith('bs'))\n      .forEach(key => {\n        let pureKey = key.replace(/^bs/, '')\n        pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length)\n        attributes[pureKey] = normalizeData(element.dataset[key])\n      })\n\n    return attributes\n  },\n\n  getDataAttribute(element, key) {\n    return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key)}`))\n  },\n\n  offset(element) {\n    const rect = element.getBoundingClientRect()\n\n    return {\n      top: rect.top + document.body.scrollTop,\n      left: rect.left + document.body.scrollLeft\n    }\n  },\n\n  position(element) {\n    return {\n      top: element.offsetTop,\n      left: element.offsetLeft\n    }\n  }\n}\n\nexport default Manipulator\n"]},"metadata":{},"sourceType":"script"}